//https://leetcode.com/explore/challenge/card/may-leetcoding-challenge-2021/598/week-1-may-1st-may-7th/3733/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    ListNode* middleNode(ListNode* head) {
        if(head == nullptr)
            return nullptr;
        
        if(head->next == nullptr)
            return head;
        
        ListNode *prev_slow = nullptr;
        ListNode *slow = head;
        ListNode *fast = head->next;
        
        while(fast && fast->next) {
            prev_slow = slow;
            slow = slow->next;
            fast = fast->next->next;
        }
        if(prev_slow) {
            prev_slow->next = nullptr;
        }
        return slow;        
    }
public:
    TreeNode* sortedListToBST(ListNode* head) {
        if(head == nullptr)
            return nullptr;
                        
        auto mid = middleNode(head);
        
        TreeNode * root = new TreeNode;
        
        if(mid) {
            root->val = mid->val;
        }
        
        if(mid != head) {
            root->left = sortedListToBST(head);
            root->right = sortedListToBST(mid->next);
        } else {
            root->right = sortedListToBST(mid->next);
        }
        return root;
    }
};
